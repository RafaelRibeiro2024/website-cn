{"id":"node_modules/@opentelemetry/api/build/esm/metrics/Metric.js","dependencies":[{"name":"C:\\Users\\Rafael\\Desktop\\3ºANO\\2ºSEMESTRE\\Computação em Nuvem\\Trabalho\\teste2\\node_modules\\@opentelemetry\\api\\build\\esm\\metrics\\Metric.js.map","includedInParent":true,"mtime":1711411810659},{"name":"C:\\Users\\Rafael\\Desktop\\3ºANO\\2ºSEMESTRE\\Computação em Nuvem\\Trabalho\\teste2\\package.json","includedInParent":true,"mtime":1711413008049},{"name":"C:\\Users\\Rafael\\Desktop\\3ºANO\\2ºSEMESTRE\\Computação em Nuvem\\Trabalho\\teste2\\node_modules\\@opentelemetry\\api\\package.json","includedInParent":true,"mtime":1711411810474}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValueType = void 0;\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** The Type of value. It describes how the data is reported. */\nvar ValueType;\n(function (ValueType) {\n  ValueType[ValueType[\"INT\"] = 0] = \"INT\";\n  ValueType[ValueType[\"DOUBLE\"] = 1] = \"DOUBLE\";\n})(ValueType || (exports.ValueType = ValueType = {}));"},"sourceMaps":{"js":{"mappings":[{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":1,"column":0},"generated":{"line":7,"column":0}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":62,"column":0},"generated":{"line":22,"column":0}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":23,"column":0}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":12},"generated":{"line":23,"column":4}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":23,"column":13}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":24,"column":0}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":0},"generated":{"line":24,"column":1}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":12},"generated":{"line":24,"column":11}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":24,"column":20}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":24,"column":22}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":2}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":11}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":12}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":21}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":22}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":27}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":28}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":31}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":32}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":33}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":2},"generated":{"line":25,"column":36}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":64,"column":5},"generated":{"line":25,"column":41}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":2}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":11}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":12}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":21}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":22}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":30}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":31}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":34}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":35}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":36}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":2},"generated":{"line":26,"column":39}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":65,"column":8},"generated":{"line":26,"column":47}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":66,"column":0},"generated":{"line":27,"column":0}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":66,"column":1},"generated":{"line":27,"column":1}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":12},"generated":{"line":27,"column":3}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":12}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":17}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":24}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":25}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":34}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":12},"generated":{"line":27,"column":37}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":46}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":49}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":50}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":51}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":52}},{"source":"../../../src/metrics/Metric.ts","name":null,"original":{"line":63,"column":21},"generated":{"line":27,"column":53}}],"sources":{"../../../src/metrics/Metric.ts":"/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Attributes, AttributeValue } from '../common/Attributes';\nimport { Context } from '../context/types';\nimport { BatchObservableResult, ObservableResult } from './ObservableResult';\n\n/**\n * Advisory options influencing aggregation configuration parameters.\n * @experimental\n */\nexport interface MetricAdvice {\n  /**\n   * Hint the explicit bucket boundaries for SDK if the metric is been\n   * aggregated with a HistogramAggregator.\n   */\n  explicitBucketBoundaries?: number[];\n}\n\n/**\n * Options needed for metric creation\n */\nexport interface MetricOptions {\n  /**\n   * The description of the Metric.\n   * @default ''\n   */\n  description?: string;\n\n  /**\n   * The unit of the Metric values.\n   * @default ''\n   */\n  unit?: string;\n\n  /**\n   * Indicates the type of the recorded value.\n   * @default {@link ValueType.DOUBLE}\n   */\n  valueType?: ValueType;\n\n  /**\n   * The advice influencing aggregation configuration parameters.\n   * @experimental\n   */\n  advice?: MetricAdvice;\n}\n\n/** The Type of value. It describes how the data is reported. */\nexport enum ValueType {\n  INT,\n  DOUBLE,\n}\n\n/**\n * Counter is the most common synchronous instrument. This instrument supports\n * an `Add(increment)` function for reporting a sum, and is restricted to\n * non-negative increments. The default aggregation is Sum, as for any additive\n * instrument.\n *\n * Example uses for Counter:\n * <ol>\n *   <li> count the number of bytes received. </li>\n *   <li> count the number of requests completed. </li>\n *   <li> count the number of accounts created. </li>\n *   <li> count the number of checkpoints run. </li>\n *   <li> count the number of 5xx errors. </li>\n * <ol>\n */\nexport interface Counter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs must not be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface UpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Increment value of counter by the input. Inputs may be negative.\n   */\n  add(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\nexport interface Histogram<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Records a measurement. Value of the measurement must not be negative.\n   */\n  record(value: number, attributes?: AttributesTypes, context?: Context): void;\n}\n\n/**\n * @deprecated please use {@link Attributes}\n */\nexport type MetricAttributes = Attributes;\n\n/**\n * @deprecated please use {@link AttributeValue}\n */\nexport type MetricAttributeValue = AttributeValue;\n\n/**\n * The observable callback for Observable instruments.\n */\nexport type ObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: ObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\n/**\n * The observable callback for a batch of Observable instruments.\n */\nexport type BatchObservableCallback<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = (\n  observableResult: BatchObservableResult<AttributesTypes>\n) => void | Promise<void>;\n\nexport interface Observable<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> {\n  /**\n   * Sets up a function that will be called whenever a metric collection is initiated.\n   *\n   * If the function is already in the list of callbacks for this Observable, the function is not added a second time.\n   */\n  addCallback(callback: ObservableCallback<AttributesTypes>): void;\n\n  /**\n   * Removes a callback previously registered with {@link Observable.addCallback}.\n   */\n  removeCallback(callback: ObservableCallback<AttributesTypes>): void;\n}\n\nexport type ObservableCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableUpDownCounter<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\nexport type ObservableGauge<\n  AttributesTypes extends MetricAttributes = MetricAttributes,\n> = Observable<AttributesTypes>;\n"},"lineCount":null}},"error":null,"hash":"08351f66f34459a9d1458dcd46d5f3e6","cacheData":{"env":{}}}